{"version":3,"sources":["components/Box.js","components/Board.js","components/Game.js","App.js","serviceWorker.js","index.js"],"names":["BoxComponent","props","className","onClick","value","Board","drawBox","index","Box","key","plays","drawBoxRow","start","count","row","box","push","Game","useState","turn","setTurn","winner","setWinner","counter","setCounter","Array","fill","updatePlays","history","updateHistory","checkGameStatus","forEach","line","a","b","c","id","i","concat","foundWinner","playRound","lastIndexPlayed","length","newHistory","slice","pop","newPlays","revertPlay","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.30ed3d32.chunk.js","sourcesContent":["import React from 'react';\n\nconst BoxComponent = props => {\n    return (\n        <button className=\"square\" onClick={props.onClick}>\n            {props.value}\n        </button>\n    );\n}\n\nexport default BoxComponent;","import React from 'react'\nimport Box from './Box'\n\nconst Board = props => {\n\n    const drawBox = function(index) {\n        return(\n            <Box key={index} value={props.plays[index]} onClick={() => props.onClick(index)} />\n        );\n    }\n\n    const drawBoxRow = function(start, count=3) {\n        const row = []\n        for (let index = start; index < count+start; index++) {\n            const box = drawBox(index)\n            row.push(box);\n        }\n        return(\n            <div className=\"board-row\">\n                { row }\n            </div>\n        );\n    }\n\n    return (\n        <div className=\"board\">\n            { drawBoxRow(0) }\n\n            { drawBoxRow(3) }\n\n            { drawBoxRow(6) }\n        </div>\n\n    );\n}\n\nexport default Board;","import React, { useState } from 'react'\nimport Board from './Board'\n\nfunction Game() {\n    const [turn, setTurn] = useState('X')\n    const [winner, setWinner] = useState('')\n    const [counter, setCounter] = useState(0)\n    const [plays, updatePlays] = useState(Array(9).fill(null))\n    const [history, updateHistory] = useState([])\n\n    const playRound = function(index) {\n        // end game when the value is above 8 or the game has a winner\n        if(counter >= 9 || winner !== '')\n            return\n        \n        // indicate that the index has been played\n        if(plays[index] == null) {\n            plays[index] = turn\n            updatePlays(plays)\n        } else {\n            return\n        }\n\n        // update the counter\n        setCounter(counter+1)\n\n        // update the history to indicate the last played position for reverting move\n        updateHistory(history.concat(index))\n        \n        // check for a game winner from the 3rd play and end at the 8th play\n        let foundWinner = ''\n        if(counter > 2 || counter <= 8) {\n            // console.log('the game should end with a game winner')\n            foundWinner = checkGameStatus()\n        }\n\n        // console.log('foundWinner: ', foundWinner)\n        if(foundWinner) {\n            setWinner(foundWinner)\n            setTurn('')\n            return\n        } else if(counter === 8) {\n            setWinner('Draw')\n            setTurn('')\n            return\n        }\n\n        // switch the player and return\n        return turn === 'X'?setTurn('O'): setTurn('X')\n    }\n  \n    const revertPlay = function() {\n        // check if there moves\n        if(counter < 1)\n            return\n\n        // if the game has a winner unset it\n        if(winner !== '') \n            setWinner('')\n\n        // console.log('reverting the last move')\n\n        // get the index to be removed\n        let lastIndexPlayed = history[history.length -1]\n\n        //revert the history\n        let newHistory = history.slice()\n        newHistory.pop(lastIndexPlayed)\n        updateHistory(newHistory)\n        // console.log(history)\n\n        // unset the latest move\n        let newPlays = plays.slice()\n        newPlays[lastIndexPlayed] = null\n        updatePlays(newPlays)\n        // console.log(plays)\n\n        // reduce the counter\n        setCounter(counter-1)\n        // console.log(counter)\n\n        // switch the player and return\n        return turn === 'X'?setTurn('O'): setTurn('X')\n    }\n\n    const checkGameStatus = function() {\n\n        let winner = ''\n\n        const winningLines = [\n            [0, 1, 2],\n            [3, 4, 5],\n            [6, 7, 8],\n            [0, 4, 8],\n            [6, 4, 2],\n            [0, 3, 6],\n            [1, 4, 7],\n            [2, 5, 8]\n        ]\n\n        winningLines.forEach(line => {\n            const [a, b, c] = line\n\n            if(plays[a] && plays[a] === plays[b] && plays[b] === plays[c]) {\n                winner = plays[a]\n            }\n        })\n\n        return winner\n    }\n\n    // useEffect(() => {\n    //     console.log('history', history)\n    //     console.log('plays', plays)\n    //     console.log('counter:', counter)\n    //     console.log('winner: ', winner)\n    // }, [history, plays, counter, winner])\n\n    return (\n      <div className=\"App\">\n        <div id=\"root\">\n  \n          </div>\n  \n          <div className=\"winner\">\n            Game winner: {winner} <br />\n            Next player: {turn}\n          </div>\n\n          <Board plays={plays} onClick={(i) => playRound(i)} />\n\n          <button className=\"play\" onClick={() => revertPlay()}>Back</button>\n      </div>\n    \n    )\n  }\n\nexport default Game\n","import React from 'react';\nimport Game from './components/Game';\nimport './App.css';\n\nfunction App() {\n  \n  return (\n    <Game />\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}